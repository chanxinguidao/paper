package com.hqu.modules.papered_count.web;

import com.github.abel533.echarts.Option;
import com.github.abel533.echarts.axis.CategoryAxis;
import com.github.abel533.echarts.axis.ValueAxis;
import com.github.abel533.echarts.code.*;
import com.github.abel533.echarts.data.LineData;
import com.github.abel533.echarts.data.PieData;
import com.github.abel533.echarts.data.PointData;
import com.github.abel533.echarts.feature.MagicType;
import com.github.abel533.echarts.json.GsonOption;
import com.github.abel533.echarts.series.Bar;
import com.github.abel533.echarts.series.Funnel;
import com.github.abel533.echarts.series.Line;
import com.github.abel533.echarts.series.Pie;
import com.hqu.modules.basedata.university.entity.University;
import com.hqu.modules.basedata.university.service.UniversityService;
import com.hqu.modules.customermanage.expertmanagement.entity.Expert;
import com.hqu.modules.customermanage.expertmanagement.service.ExpertService;
import com.hqu.modules.papercount.service.PaperCountService;
import com.hqu.modules.papermanage.entity.Paper;
import com.hqu.modules.papermanage.service.PaperService;
import com.hqu.modules.paperreceive.receive.service.ReceiveService;
import com.jeeplus.modules.test.manytomany.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;

@Controller
@RequestMapping(value = "${adminPath}/papered_count/papered_count")
public class papered_count {
    //@Autowired 我需要的表

    @Autowired
    ExpertService expertService;
    //
    @Autowired
    StudentService studentService;
    @Autowired
    PaperCountService paperCountService;
    @Autowired
    UniversityService universityService;


    @RequestMapping(value = {"","list"})
    public String list(Model model){
        return "/modules/papered_count/papered_countForm";
    }

    //柱状图
    @ResponseBody
    @RequestMapping("bar")
    public GsonOption getOption(@RequestParam(value = "beginDate",required = false)String beginDate,
                                @RequestParam(value = "endDate",required = false)String endDate,
                                @RequestParam(value = "lwlxdm",required = false)String lwlxdm,
                                @RequestParam(value = "flag",required = false)String flag){
        //List<Paper> paper = paperService.selectAll_paper();
        //

        List<University> university=universityService.selectAll_University();

        GsonOption option = new GsonOption();
        option.title().text("评审论文数量分布情况");
        option.tooltip().trigger(Trigger.axis);
        option.legend("学士论文", "硕士论文", "博士论文");
        option.toolbox().show(true).feature(Tool.mark, Tool.dataView, new MagicType(Magic.pie, Magic.line, Magic.bar).show(true), Tool.restore, Tool.saveAsImage);
        option.calculable(true);
        //画个x轴

        String[] university_name=new String[university.size()];
        int[] xslw_number=new int[university.size()];
        int[] sslw_number=new int[university.size()];
        int[] bslw_number=new int[university.size()];
        int i=0;

        Bar bar = new Bar("学士论文");
        Bar bar2 = new Bar("硕士论文");
        Bar bar3 = new Bar("博士论文");

        //
        for (University university1:university) {
            university_name[i] = university1.getGxmc();
            if (flag == "1") {
                xslw_number[i] = paperCountService.selectOneTypePaper(university1.getGxdm(), lwlxdm, beginDate, endDate);
                sslw_number[i] = paperCountService.selectOneTypePaper(university1.getGxdm(), lwlxdm, beginDate, endDate);
                bslw_number[i] = paperCountService.selectOneTypePaper(university1.getGxdm(), lwlxdm, beginDate, endDate);
            } else {
                xslw_number[i] = paperCountService.selectOneType_Paper(university1.getGxdm(), "0");
                sslw_number[i] = paperCountService.selectOneType_Paper(university1.getGxdm(), "1");
                bslw_number[i] = paperCountService.selectOneType_Paper(university1.getGxdm(), "2");
            }
            bar.data(xslw_number[i]);
            bar2.data(sslw_number[i]);
            bar3.data(bslw_number[i]);
            i++;
        }

        option.xAxis(new CategoryAxis().data(university_name));
        option.yAxis(new ValueAxis());
        bar.markPoint().data(new PointData().type(MarkType.max).name("最大值"), new PointData().type(MarkType.min).name("最小值"));
        bar.markLine().data(new PointData().type(MarkType.average).name("平均值"));
        bar2.markPoint().data(new PointData().type(MarkType.max).name("最大值"), new PointData().type(MarkType.min).name("最小值"));
        bar2.markLine().data(new PointData().type(MarkType.average).name("平均值"));
        bar3.markPoint().data(new PointData().type(MarkType.max).name("最大值"), new PointData().type(MarkType.min).name("最小值"));
        bar3.markLine().data(new PointData().type(MarkType.average).name("平均值"));

        option.series(bar,bar2,bar3);
        //

        return option;
    }

    @ResponseBody
    @RequestMapping("pie")
    public GsonOption getOption1(){
        GsonOption option = new GsonOption();
        List<University> university=universityService.selectAll_University();
        //时间轴
        option.timeline().data("2013-01-01", "2013-02-01", "2013-03-01", "2013-04-01", "2013-05-01",
                new LineData("2013-06-01", "emptyStart6", 8), "2013-07-01", "2013-08-01", "2013-09-01", "2013-10-01",
                "2013-11-01", new LineData("2013-12-01", "star6", 8));
        option.timeline().autoPlay(true);

        Option basic = new Option();
        basic.title().text("各高校评审论文占比变化");
        basic.tooltip().trigger(Trigger.item).formatter("{a} <br/>{b} : {c} ({d}%)");
        String[] university_name=new String[university.size()];
        int j=0;
        for (University university1:university) {
            university_name[j] = university1.getGxmc();
            j++;
        }
        basic.legend().data(university_name);
        basic.toolbox().show(true).feature(Tool.mark, Tool.dataView, Tool.restore, Tool.saveAsImage, new MagicType(Magic.pie, Magic.funnel)
                .option(new MagicType.Option().funnel(
                        new Funnel().x("25%").width("50%").funnelAlign(X.left).max(1548))));

        int idx = 1;
        Pie pie = getPie(idx++).center("50%", "45%").radius("50%");
        pie.label().normal().show(true).formatter("{b}{c}({d}%)");
        basic.series(pie);
        //加入
        option.options(basic);
        //构造11个数据
        Option[] os = new Option[11];
        for (int i = 0; i < os.length; i++) {
            os[i] = new Option().series(getPie(idx++));
        }
        option.options(os);
        return option;
    }

    /**
     * 获取饼图数据
     *
     * @param idx
     * @return
     */
    public Pie getPie(int idx) {
        List<University> university=universityService.selectAll_University();
        PieData[] pieDatas=new PieData[university.size()*10];
        Pie pie=new Pie("评审论文数量");
        int i=0;
        for (University university1:university) {
            PieData xs_pieData=new PieData(university1.getGxmc()+"学士论文",idx * 128 + 80);
            pieDatas[i]=xs_pieData;
            PieData ss_pieData=new PieData(university1.getGxmc()+"硕士论文",idx * 64 + 70);
            pieDatas[++i]=ss_pieData;
            PieData bs_pieData=new PieData(university1.getGxmc()+"博士论文",idx * 32 + 60);
            pieDatas[i++]=bs_pieData;
            i++;
        }
        return pie.data(pieDatas);
    }


    @ResponseBody
    @RequestMapping("line")
    public GsonOption getOption2(){
        GsonOption option = new GsonOption();
        List<University> university=universityService.selectAll_University();

        option.tooltip().trigger(Trigger.axis);
        option.legend("学士论文", "硕士论文", "博士论文");
        option.toolbox().show(true);
        option.calculable(true);
        String[] university_name=new String[university.size()];

        int[] xslw_number=new int[university.size()];
        int[] sslw_number=new int[university.size()];
        int[] bslw_number=new int[university.size()];
        int i=0;
        Line line = new Line("学士论文");
        Line line1 = new Line("硕士论文");
        Line line2 = new Line("博士论文");

        for (University university1:university) {
            university_name[i]=university1.getGxmc();

            xslw_number[i] = paperCountService.selectOneType_Paper(university1.getGxdm(), "0");
            sslw_number[i] = paperCountService.selectOneType_Paper(university1.getGxdm(), "1");
            bslw_number[i] = paperCountService.selectOneType_Paper(university1.getGxdm(), "2");


            line.data(xslw_number[i]);
            line1.data(sslw_number[i]);
            line2.data(bslw_number[i]);
            i++;
        }
        option.xAxis(new CategoryAxis().boundaryGap(false).data(university_name));
        option.yAxis(new ValueAxis());
        option.series(line,line1,line2);

        return option;
    }
}
