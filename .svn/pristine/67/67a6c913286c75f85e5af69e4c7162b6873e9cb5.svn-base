/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.hqu.modules.basedata.university.web;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import com.alibaba.fastjson.JSON;
import com.hqu.modules.basedata.organizationmanagement.service.OrganizationManagementService;
import com.hqu.modules.common.service.CommonService;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.collect.Lists;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.web.BaseController;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.utils.excel.ExportExcel;
import com.jeeplus.common.utils.excel.ImportExcel;
import com.hqu.modules.basedata.university.entity.University;
import com.hqu.modules.basedata.university.service.UniversityService;

/**
 * 高校代码表Controller
 * @author wdz
 * @version 2018-09-25
 */
@Controller
@RequestMapping(value = "${adminPath}/university/university")
public class UniversityController extends BaseController {
	@Autowired
	private UniversityService universityService;
	@Autowired
	private CommonService commonService;
	@Autowired
	private OrganizationManagementService orgService;

	@ModelAttribute
	public University get(@RequestParam(required=false) String id) {
		University entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = universityService.get(id);
		}
		if (entity == null){
			entity = new University();
		}
		return entity;
	}

	/**
	 * 高校代码表列表页面
	 */
	@RequiresPermissions("university:university:list")
	@RequestMapping(value = {"list", ""})
	public String list(University university, Model model) {
		model.addAttribute("university", university);
		return "basedata/university/universityList";
	}


	/*
       打开地图
    */
	@RequiresPermissions(value={"university:university:view","university:university:add","university:university:edit"},logical=Logical.OR)
	@RequestMapping("pickPoint")
	public String pickPoint() {
		return "basedata/university/pickPoint";
	}

	/**
	 * 高校代码表列表数据
	 */
	@ResponseBody
	@RequiresPermissions("university:university:list")
	@RequestMapping(value = "data")
	public Map<String, Object> data(University university, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<University> page = universityService.findPage(new Page<University>(request, response), university);
		return getBootstrapData(page);
	}

	/**
	 * 查看，增加，编辑高校代码表表单页面
	 */
	@RequiresPermissions(value={"university:university:view","university:university:add","university:university:edit"},logical=Logical.OR)
	@RequestMapping(value = "form/{mode}")
	public String form(@PathVariable String mode, University university, Model model) {

		model.addAttribute("university", university);
		model.addAttribute("mode", mode);
		return "basedata/university/universityForm";
	}

	/**
	 * 保存高校代码表
	 */
	@ResponseBody
	@RequiresPermissions(value={"university:university:add","university:university:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public AjaxJson save(University university, Model model) throws Exception{
		AjaxJson j = new AjaxJson();
		/**
		 * 后台hibernate-validation插件校验
		 */
		String errMsg = beanValidator(university);
		if (StringUtils.isNotBlank(errMsg)){
			j.setSuccess(false);
			j.setMsg(errMsg);
			return j;
		}
		//新增或编辑表单保存
		if(checkOnly(university,"t_university_c","gxdm")&&checkOnly(university,"t_university_c","gxmc")) {
			if(university.getGxdm().matches("^[0-9_]+$"))
			{
				universityService.save(university);//保存
				j.setSuccess(true);
				j.setMsg("保存高校代码表成功");
			}
			else {
				j.setSuccess(false);
				j.setMsg("高校代码请填写数字");
			}

		}
		else if(checkOnly(university,"t_university_c","gxdm")){
			j.setSuccess(false);
			j.setMsg("高校名称已存在！");
		}
		else {
			j.setSuccess(false);
			j.setMsg("高校代码已存在！");
		}
		return j;

	}
	public boolean checkOnly(University university,String tableName,String filedName){

		University existuniversity= universityService.get(university.getId());

		if(existuniversity != null){
			if(existuniversity.getGxdm().equals(university.getGxdm())) {
				return true;
			}
			else{
				boolean statement1 = commonService.checkOnly(tableName, filedName, university.getGxdm());
				if (statement1) {
					logger.debug("编码已存在!");
					return false;
				} else {
					return true;
				}
			}
		}
		else {
			boolean statement1 = commonService.checkOnly(tableName, filedName, university.getGxdm());
			if (statement1) {
				logger.debug("编码已存在!");
				return false;
			} else {
				return true;
			}
		}
	}

	/**
	 * 删除高校代码表
	 */
	@ResponseBody
	@RequiresPermissions("university:university:del")
	@RequestMapping(value = "delete")
	public AjaxJson delete(University university) {
		AjaxJson j = new AjaxJson();
		universityService.delete(university);
		j.setMsg("删除高校代码表成功");
		return j;
	}

	/**
	 * 批量删除高校代码表
	 */
	@ResponseBody
	@RequiresPermissions("university:university:del")
	@RequestMapping(value = "deleteAll")
	public AjaxJson deleteAll(String ids) {
		AjaxJson j = new AjaxJson();
		String idArray[] =ids.split(",");
		for(String id : idArray){
			universityService.delete(universityService.get(id));
		}
		j.setMsg("删除高校代码表成功");
		return j;
	}

	/**
	 * 导出excel文件
	 */
	@ResponseBody
	@RequiresPermissions("university:university:export")
	@RequestMapping(value = "export")
	public AjaxJson exportFile(University university, HttpServletRequest request, HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		try {
			String fileName = "高校代码表"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
			Page<University> page = universityService.findPage(new Page<University>(request, response, -1), university);
			new ExportExcel("高校代码表", University.class).setDataList(page.getList()).write(response, fileName).dispose();
			j.setSuccess(true);
			j.setMsg("导出成功！");
			return j;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导出高校代码表记录失败！失败信息："+e.getMessage());
		}
		return j;
	}

	/**
	 * 导入Excel数据

	 */
	@ResponseBody
	@RequiresPermissions("university:university:import")
	@RequestMapping(value = "import")
	public AjaxJson importFile(@RequestParam("file")MultipartFile file, HttpServletResponse response, HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<University> list = ei.getDataList(University.class);
			for (University university : list){
				try{
					universityService.save(university);
					successNum++;
				}catch(ConstraintViolationException ex){
					failureNum++;
				}catch (Exception ex) {
					failureNum++;
				}
			}
			if (failureNum>0){
				failureMsg.insert(0, "，失败 "+failureNum+" 条高校代码表记录。");
			}
			j.setMsg( "已成功导入 "+successNum+" 条高校代码表记录"+failureMsg);
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导入高校代码表失败！失败信息："+e.getMessage());
		}
		return j;
	}

	/**
	 * 下载导入高校代码表数据模板
	 */
	@ResponseBody
	@RequiresPermissions("university:university:import")
	@RequestMapping(value = "import/template")
	public AjaxJson importFileTemplate(HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		try {
			String fileName = "高校代码表数据导入模板.xlsx";
			List<University> list = Lists.newArrayList();
			new ExportExcel("高校代码表数据", University.class, 1).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg( "导入模板下载失败！失败信息："+e.getMessage());
		}
		return j;
	}


	@RequestMapping("universityMap")
	public String specialistMap() {
		return "statistic/universityMap";
	}

	@RequestMapping("mapData")
	@ResponseBody
	public String mapData() {
		List<Map<String,String>> result = universityService.universityMap();
		result.addAll(orgService.orgMap());
		return JSON.toJSONString(result);
	}
}