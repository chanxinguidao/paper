/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.hqu.modules.basedata.studentmanage.web;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import com.hqu.modules.common.service.CommonService;
import com.hqu.modules.customermanage.secretarymanage.entity.SecretaryManage;
import com.jeeplus.modules.monitor.utils.Common;
import com.jeeplus.modules.sys.entity.Office;
import com.jeeplus.modules.sys.entity.Role;
import com.jeeplus.modules.sys.entity.User;
import com.jeeplus.modules.sys.service.SystemService;
import com.jeeplus.modules.sys.utils.UserUtils;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.collect.Lists;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.web.BaseController;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.utils.excel.ExportExcel;
import com.jeeplus.common.utils.excel.ImportExcel;
import com.hqu.modules.basedata.studentmanage.entity.StudentManage;
import com.hqu.modules.basedata.studentmanage.service.StudentManageService;

/**
 * 学生管理Controller
 * @author ljc
 * @version 2018-09-10
 */
@Controller
@RequestMapping(value = "${adminPath}/studentmanage/studentManage")
public class StudentManageController extends BaseController {

	@Autowired
	private StudentManageService studentManageService;

	@Autowired
	private CommonService commonService;

	@Autowired
	private SystemService systemService;


	@ModelAttribute
	public StudentManage get(@RequestParam(required=false) String id) {
		StudentManage entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = studentManageService.get(id);
		}
		if (entity == null){
			entity = new StudentManage();
		}
		return entity;
	}
	
	/**
	 * 学生信息列表页面
	 */
	@RequiresPermissions("studentmanage:studentManage:list")
	@RequestMapping(value = {"list", ""})
	public String list(StudentManage studentManage, Model model) {
		model.addAttribute("studentManage", studentManage);
		return "basedata/studentmanage/studentManageList";
	}
	
		/**
	 * 学生信息列表数据
	 */
	@ResponseBody
	@RequiresPermissions("studentmanage:studentManage:list")
	@RequestMapping(value = "data")
	public Map<String, Object> data(StudentManage studentManage, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<StudentManage> page = studentManageService.findPage(new Page<StudentManage>(request, response), studentManage); 
		return getBootstrapData(page);
	}

	/**
	 * 查看，增加，编辑学生信息表单页面
	 */
	@RequiresPermissions(value={"studentmanage:studentManage:view","studentmanage:studentManage:add","studentmanage:studentManage:edit"},logical=Logical.OR)
	@RequestMapping(value = "form/{mode}")
	public String form(@PathVariable String mode, StudentManage studentManage, Model model) {
		model.addAttribute("studentManage", studentManage);
		model.addAttribute("mode", mode);
		return "basedata/studentmanage/studentManageForm";
	}

	/**
	 * 保存学生信息
	 */
	@ResponseBody
	@RequiresPermissions(value={"studentmanage:studentManage:add","studentmanage:studentManage:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public AjaxJson save(StudentManage studentManage, Model model,SecretaryManage secretaryManage) throws Exception{
		AjaxJson j = new AjaxJson();
		/**
		 * 后台hibernate-validation插件校验
		 */
		String errMsg = beanValidator(studentManage);
		if (StringUtils.isNotBlank(errMsg)){
			j.setSuccess(false);
			j.setMsg(errMsg);
			return j;
		}
		//TODO: 获取登录秘书信息，自动生成秘书高校代码+六位自流水 2018 10 7
		/*
		if(StringUtils.isBlank(studentManage.getXsxh())){
			User u = new User();
			String newXsxh = studentManageService.getMaxIdByMsdm(msdm);
			if (StringUtils.isEmpty(newXsxh)){
				newXsxh = "000000";
			}else {
				newXsxh = String.format("%06d", Integer.parseInt(newXsxh.substring()) + 1);

			}
		}
		*/
		//新增或编辑表单保存
		if (checkOnly(studentManage,"t_student_manage","xsxh")) {
			studentManageService.save(studentManage);//保存
			User checkUserExisted = systemService.getUserByLoginName(studentManage.getXsxh());
			if (null == checkUserExisted){
				User user = new User();
				user.setPhoto("/paper/userfiles/1/程序附件//photo/2018/9/timg.jpg");
				Office office = new Office();
				office.setId(Global.getConfig("STUDENT_OFFICE_ID"));
				user.setOffice(office);

				Office company = new Office();
				company.setId(Global.getConfig("STUDENT_COMPANY_ID"));
				user.setCompany(company);
				user.setLoginName(studentManage.getXsxh());
				user.setPassword(systemService.entryptPassword(Global.getConfig("STUDENT_PASSWORD")));
				user.setName(studentManage.getXsxm());

				Role role = systemService.getRole(Global.getConfig("STUDENT_ROLE_ID"));
				user.setRole(role);
				List<Role> roleList = new ArrayList<>();
				roleList.add(role);
				user.setRoleList(roleList);

				systemService.saveUser(user);
				UserUtils.clearCache(user);
			}

			j.setSuccess(true);
			j.setMsg("保存学生信息成功,默认密码为 123456");
		}
		else{
			j.setSuccess(false);
			j.setMsg("学生账号已存在！");
		}
		return j;
	}

	public boolean checkOnly(StudentManage studentManage, String tableName, String filedName){

		StudentManage existedStudent = studentManageService.get(studentManage.getId());

		if(existedStudent != null){
			if(existedStudent.getXsxh().equals(studentManage.getXsxh())) {
				return true;
			}
			else{
				boolean statement1 = commonService.checkOnly(tableName, filedName, studentManage.getXsxh());
				if (statement1) {
					logger.debug("编码已存在");
					return false;
				} else {
					return true;
				}
			}
		}
		else {
			boolean statement1 = commonService.checkOnly(tableName, filedName, studentManage.getXsxh());
			if (statement1) {
				logger.debug("编码已存在");
				return false;
			} else {
				return true;
			}
		}
	}
	/**
	 * 删除学生信息
	 */
	@ResponseBody
	@RequiresPermissions("studentmanage:studentManage:del")
	@RequestMapping(value = "delete")
	public AjaxJson delete(StudentManage studentManage) {
		AjaxJson j = new AjaxJson();
		studentManageService.delete(studentManage);
		j.setMsg("删除学生信息成功");
		return j;
	}
	
	/**
	 * 批量删除学生信息
	 */
	@ResponseBody
	@RequiresPermissions("studentmanage:studentManage:del")
	@RequestMapping(value = "deleteAll")
	public AjaxJson deleteAll(String ids) {
		AjaxJson j = new AjaxJson();
		String idArray[] =ids.split(",");
		for(String id : idArray){
			studentManageService.delete(studentManageService.get(id));
		}
		j.setMsg("删除学生信息成功");
		return j;
	}
	
	/**
	 * 导出excel文件
	 */
	@ResponseBody
	@RequiresPermissions("studentmanage:studentManage:export")
    @RequestMapping(value = "export")
    public AjaxJson exportFile(StudentManage studentManage, HttpServletRequest request, HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		try {
            String fileName = "学生信息"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<StudentManage> page = studentManageService.findPage(new Page<StudentManage>(request, response, -1), studentManage);
    		new ExportExcel("学生信息", StudentManage.class).setDataList(page.getList()).write(response, fileName).dispose();
    		j.setSuccess(true);
    		j.setMsg("导出成功！");
    		return j;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导出学生信息记录失败！失败信息："+e.getMessage());
		}
			return j;
    }

	/**
	 * 导入Excel数据
	 */
	@ResponseBody
	@RequiresPermissions("studentmanage:studentManage:import")
    @RequestMapping(value = "import")
   	public AjaxJson importFile(@RequestParam("file")MultipartFile file, HttpServletResponse response, HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<StudentManage> list = ei.getDataList(StudentManage.class);
			for (StudentManage studentManage : list){
				try{
					studentManageService.save(studentManage);
					successNum++;
				}catch(ConstraintViolationException ex){
					failureNum++;
				}catch (Exception ex) {
					failureNum++;
				}
			}
			if (failureNum>0){
				failureMsg.insert(0, "，失败 "+failureNum+" 条学生信息记录。");
			}
			j.setMsg( "已成功导入 "+successNum+" 条学生信息记录"+failureMsg);
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导入学生信息失败！失败信息："+e.getMessage());
		}
		return j;
    }
	
	/**
	 * 下载导入学生信息数据模板
	 */
	@ResponseBody
	@RequiresPermissions("studentmanage:studentManage:import")
    @RequestMapping(value = "import/template")
     public AjaxJson importFileTemplate(HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		try {
            String fileName = "学生信息数据导入模板.xlsx";
    		List<StudentManage> list = Lists.newArrayList(); 
    		new ExportExcel("学生信息数据", StudentManage.class, 1).setDataList(list).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg( "导入模板下载失败！失败信息："+e.getMessage());
		}
		return j;
    }

}