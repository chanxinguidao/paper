/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.hqu.modules.paperreview.web;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import com.hqu.modules.customermanage.expertmanagement.entity.Expert;
import com.hqu.modules.papermanage.entity.Paper;
import com.hqu.modules.papermanage.service.PaperService;
import com.hqu.modules.paperreview.entity.PaperReview;
import com.hqu.modules.paperreview.service.PaperReviewService;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.collect.Lists;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.web.BaseController;
import com.jeeplus.modules.sys.entity.User;
import com.jeeplus.modules.sys.utils.UserUtils;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.utils.excel.ExportExcel;
import com.jeeplus.common.utils.excel.ImportExcel;



/**
 * 订单Controller
 * @author hzm
 * @version 2018-09-01
 */
@Controller
@RequestMapping(value = "${adminPath}/paperReview/review")
public class PaperReviewController extends BaseController {

	@Autowired
	private PaperReviewService orderService;
	@Autowired
	private PaperService paperService;
	@ModelAttribute
	public PaperReview get(@RequestParam(required=false) String id) {
		PaperReview entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = orderService.get(id);
		}
		if (entity == null){
			entity = new PaperReview();
		}
		return entity;
	}
	
	/**
	 * 订单列表页面
	 */
	@RequiresPermissions("order:order:list")
	@RequestMapping(value = {"list", ""})
	public String list(PaperReview order, Model model) {
		model.addAttribute("order", order);
		return "modules/paperreview/paperList";
	}
	
		/**
	 * 订单列表数据
	 */
	@ResponseBody
	@RequiresPermissions("order:order:list")
	@RequestMapping(value = "data")
	public Map<String, Object> data(PaperReview order, HttpServletRequest request, HttpServletResponse response, Model model) {
		if(order==null)
			order = new PaperReview();
		User user = UserUtils.getUser();
		Expert Pszj = new Expert();
		Pszj.setYHZH(user.getLoginName());
		order.setPszj(Pszj);
		System.out.println(order.getPszj().getYHZH()+"--");
		Page<PaperReview> page = orderService.findPage(new Page<PaperReview>(request, response), order); 
		
		return getBootstrapData(page);
	}

	/**
	 * 查看，增加，编辑订单表单页面
	 */
	@RequiresPermissions(value={"order:order:view","order:order:add","order:order:edit"},logical=Logical.OR)
	@RequestMapping(value = "form/{mode}")
	public String form(@PathVariable String mode, PaperReview order, Model model) {
		if(StringUtils.isEmpty(order.getId())) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
			Random random = new Random();
			String num = Integer.toString(random.nextInt(10000));
			order.setDdh(sdf.format(new Date()) + num);
			order.setXdrq(new Date());
		}
		model.addAttribute("order", order);
		model.addAttribute("mode", mode);
		return "modules/paperreview/paperForm";
	}

	/**
	 * 保存订单
	 */
	@ResponseBody
	@RequiresPermissions(value={"order:order:add","order:order:edit"},logical=Logical.OR)
	@RequestMapping(value = "save")
	public AjaxJson save(PaperReview order, Model model) throws Exception{
		AjaxJson j = new AjaxJson();
		/**
		 * 后台hibernate-validation插件校验
		 */
		String errMsg = beanValidator(order);
		if (StringUtils.isNotBlank(errMsg)){
			j.setSuccess(false);
			j.setMsg(errMsg);
			return j;
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("yhzh", order.getPszj().getYHZH());
		map.put("ye", order.getZj());
		//新增或编辑表单保存
		try {
			orderService.review(order);//保存
			orderService.addReviewTimes(order.getPszj().getYHZH());
			orderService.addMoney(map);
			//修改论文状态
			Paper paper=new Paper();
			List<Paper> papers=paperService.findList(order.getLw());
			if(papers.size()>0){
				papers.get(0).setLWZTDM("f");
				paperService.save(papers.get(0));
			}
			j.setSuccess(true);
			j.setMsg("评审成功");
			return j;
		}catch (Exception e) {
			// TODO: handle exception
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			j.setSuccess(false);
			j.setMsg("评审失败");
			return j;
		}
		
	}
	
	/**
	 * 删除订单
	 */
	@ResponseBody
	@RequiresPermissions("order:order:del")
	@RequestMapping(value = "delete")
	public AjaxJson delete(PaperReview order) {
		AjaxJson j = new AjaxJson();
		orderService.delete(order);
		j.setMsg("删除订单成功");
		return j;
	}
	
	/**
	 * 批量删除订单
	 */
	@ResponseBody
	@RequiresPermissions("order:order:del")
	@RequestMapping(value = "deleteAll")
	public AjaxJson deleteAll(String ids) {
		AjaxJson j = new AjaxJson();
		String idArray[] =ids.split(",");
		for(String id : idArray){
			orderService.delete(orderService.get(id));
		}
		j.setMsg("删除订单成功");
		return j;
	}
	
	/**
	 * 导出excel文件
	 */
	@ResponseBody
	@RequiresPermissions("order:order:export")
    @RequestMapping(value = "export")
    public AjaxJson exportFile(PaperReview order, HttpServletRequest request, HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		try {
            String fileName = "订单"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<PaperReview> page = orderService.findPage(new Page<PaperReview>(request, response, -1), order);
    		new ExportExcel("订单", PaperReview.class).setDataList(page.getList()).write(response, fileName).dispose();
    		j.setSuccess(true);
    		j.setMsg("导出成功！");
    		return j;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导出订单记录失败！失败信息："+e.getMessage());
		}
			return j;
    }

	/**
	 * 导入Excel数据

	 */
	@ResponseBody
	@RequiresPermissions("order:order:import")
    @RequestMapping(value = "import")
   	public AjaxJson importFile(@RequestParam("file")MultipartFile file, HttpServletResponse response, HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<PaperReview> list = ei.getDataList(PaperReview.class);
			for (PaperReview order : list){
				try{
					orderService.save(order);
					successNum++;
				}catch(ConstraintViolationException ex){
					failureNum++;
				}catch (Exception ex) {
					failureNum++;
				}
			}
			if (failureNum>0){
				failureMsg.insert(0, "，失败 "+failureNum+" 条订单记录。");
			}
			j.setMsg( "已成功导入 "+successNum+" 条订单记录"+failureMsg);
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导入订单失败！失败信息："+e.getMessage());
		}
		return j;
    }
	
	/**
	 * 下载导入订单数据模板
	 */
	@ResponseBody
	@RequiresPermissions("order:order:import")
    @RequestMapping(value = "import/template")
     public AjaxJson importFileTemplate(HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		try {
            String fileName = "订单数据导入模板.xlsx";
    		List<PaperReview> list = Lists.newArrayList(); 
    		new ExportExcel("订单数据", PaperReview.class, 1).setDataList(list).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg( "导入模板下载失败！失败信息："+e.getMessage());
		}
		return j;
    }

}